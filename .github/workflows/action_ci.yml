name: ASF_ItemDropper-CI

on: [push, pull_request]

env:
  CONFIGURATION: Release
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: 1
  DOTNET_SDK_VERSION: 5.0.x
  NET_CORE_VERSION: net5.0
  NET_FRAMEWORK_VERSION: net48

jobs:
  main:
    strategy:
      matrix:
        #os: [ubuntu-latest, windows-latest]
        os: [ubuntu-latest]
 
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - name: Verify .NET Core
        run: dotnet --info 

      - name: Install dependencies
        run: dotnet restore

      - name: Build ASF_ItemDropper
        run: dotnet build -c "${{ env.CONFIGURATION }}" -p:UseAppHost=false --nologo

      - name: Run ASF_ItemDropper.Tests
        run: dotnet test ASF_ItemDropper.Tests -c "${{ env.CONFIGURATION }}" -p:UseAppHost=false --nologo

      - name: Publish ASF_ItemDropper for .NET Core
        run: |
          dotnet publish -c c "${{ env.CONFIGURATION }}" -f "${{ env.NET_CORE_VERSION }}" -o "out/generic" -p:LinkDuringPublish=false -p:UseAppHost=false --nologo

      - name: Upload ASF_ItemDropper
        uses: actions/upload-artifact@v2
        with:
          # Artifact name
          name: ASF_ItemDropper
          # Destination path(s)
          path: |
            out/generic/
            idropdeflist.txt
          if-no-files-found: warn # 'error', 'warn' or 'ignore' are also available, defaults to `warn`

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     tag_name: TagÂ°${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     body: WIP
      #     draft: false
      #     prerelease: true
      # - name: Upload Release Asset
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      #     asset_path: ASFItemDropper.tar
      #     asset_name: ASFItemDropper.tar
      #     asset_content_type: application/tar
